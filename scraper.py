from tmapi import TmapiClient
from yandex_gpt import YandexGPTClient
from exchange_rate import ExchangeRateClient
from yandex_translate import YandexTranslateClient
from config import settings

class Scraper:
    """
    –ö–ª–∞—Å—Å-–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ, –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞.
    """
    def __init__(self):
        self.tmapi_client = TmapiClient()  # –ö–ª–∏–µ–Ω—Ç –¥–ª—è tmapi.top
        self.yandex_gpt_client = YandexGPTClient()  # –ö–ª–∏–µ–Ω—Ç –¥–ª—è YandexGPT
        self.exchange_rate_client = ExchangeRateClient()  # –ö–ª–∏–µ–Ω—Ç –¥–ª—è ExchangeRate-API
        self.yandex_translate_client = YandexTranslateClient()  # –ö–ª–∏–µ–Ω—Ç –¥–ª—è Yandex.Translate

    async def scrape_product(self, url: str):
        """
        –°–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –ø–æ URL, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç.

        Args:
            url (str): URL —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞.

        Returns:
            tuple: –ö–æ—Ä—Ç–µ–∂, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ (str) –∏ —Å–ø–∏—Å–æ–∫ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (list).
        """
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ —á–µ—Ä–µ–∑ tmapi.top
        api_response = await self.tmapi_client.get_product_info(url)
        
        # TMAPI –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É: {"code": 200, "msg": "success", "data": {...}}
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ –ø–æ–ª—è "data"
        if isinstance(api_response, dict) and 'data' in api_response:
            product_data = api_response['data']
        else:
            product_data = api_response
        
        if settings.DEBUG_MODE:
            print(f"[Scraper] –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—É—á–µ–Ω—ã: {product_data.get('title', 'N/A')[:50]}...")
        
        exchange_rate = None
        # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç, –ø–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å
        if settings.CONVERT_CURRENCY:
            exchange_rate = await self.exchange_rate_client.get_exchange_rate()

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é YandexGPT
        # LLM –≤–µ—Ä–Ω–µ—Ç JSON —Å: title, description, characteristics, hashtags
        llm_content = await self.yandex_gpt_client.generate_post_content(product_data)
        
        if settings.DEBUG_MODE:
            print(f"[Scraper] LLM –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω: {llm_content.get('title', 'N/A')}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        post_text = self._build_post_text(
            llm_content=llm_content,
            product_data=product_data,
            exchange_rate=exchange_rate
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–µ (–≤—Å–µ —Ñ–æ—Ç–æ)
        image_urls = product_data.get('main_imgs', [])

        return post_text, image_urls
    
    def _format_size_range(self, sizes_str: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä–Ω—ã–π —Ä—è–¥. –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω.
        
        Args:
            sizes_str: –°—Ç—Ä–æ–∫–∞ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä "S, M, L" –∏–ª–∏ "XS, S, M, L, XL")
        
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤
        """
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –≤ –ø–æ—Ä—è–¥–∫–µ
        standard_sizes = ['XXS', 'XS', 'S', 'M', 'L', 'XL', 'XXL', 'XXXL']
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—á–∏—â–∞–µ–º
        sizes = [s.strip().upper() for s in sizes_str.replace(',', ' ').split()]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —Ä–∞–∑–º–µ—Ä—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
        if all(s in standard_sizes for s in sizes):
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
            indices = [standard_sizes.index(s) for s in sizes]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤)
            if len(indices) > 1 and indices == list(range(min(indices), max(indices) + 1)):
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
                return f"{sizes[0]}-{sizes[-1]}"
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        return sizes_str
    
    def _build_post_text(self, llm_content: dict, product_data: dict, exchange_rate: float = None) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö LLM –∏ –¥–∞–Ω–Ω—ã—Ö API.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç HTML —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è Telegram.

        Args:
            llm_content (dict): –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç YandexGPT
            product_data (dict): –î–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –æ—Ç TMAPI
            exchange_rate (float, optional): –ö—É—Ä—Å –æ–±–º–µ–Ω–∞ CNY –≤ RUB

        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –≤ HTML
        """
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ LLM –æ—Ç–≤–µ—Ç–∞
        title = llm_content.get('title', '–¢–æ–≤–∞—Ä')
        description = llm_content.get('description', '')
        main_characteristics = llm_content.get('main_characteristics', {})
        additional_info = llm_content.get('additional_info', {})
        hashtags = llm_content.get('hashtags', [])
        emoji = llm_content.get('emoji', '')
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ API
        price = product_data.get('price_info', {}).get('price', 'N/A')
        product_url = product_data.get('product_url', '')
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç
        post_parts = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏ (–∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º)
        title_line = f"{emoji} " if emoji else ""
        title_line += f"<b>{title}</b>"
        post_parts.append(title_line)
        post_parts.append("")
        
        # –û–ø–∏—Å–∞–Ω–∏–µ –≤ –≤–∏–¥–µ —Ü–∏—Ç–∞—Ç—ã
        if description:
            post_parts.append(f"<blockquote>{description}</blockquote>")
            post_parts.append("")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        if main_characteristics:
            for key, value in main_characteristics.items():
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –µ—Å–ª–∏ —ç—Ç–æ —Ä–∞–∑–º–µ—Ä—ã
                if '—Ä–∞–∑–º–µ—Ä' in key.lower() and isinstance(value, str):
                    value = self._format_size_range(value)
                
                if isinstance(value, list):
                    # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ - —Å–ø–∏—Å–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ü–≤–µ—Ç–∞)
                    post_parts.append(f"<b>{key}:</b>")
                    for item in value:
                        post_parts.append(f"  ‚Ä¢ {item}")
                    post_parts.append("")
                else:
                    # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ - —Å—Ç—Ä–æ–∫–∞
                    post_parts.append(f"<b>{key}:</b> {value}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å)
        if additional_info:
            for key, value in additional_info.items():
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                if value and str(value).strip():
                    post_parts.append(f"<b>{key}:</b> {value}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ –¥–æ–ø. –¥–∞–Ω–Ω—ã–µ
            if any(v and str(v).strip() for v in additional_info.values()):
                post_parts.append("")
        
        # –ï—Å–ª–∏ –±—ã–ª–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –ø–µ—Ä–µ–¥ —Ü–µ–Ω–æ–π
        if main_characteristics or additional_info:
            if not post_parts[-1] == "":
                post_parts.append("")
        
        # –¶–µ–Ω–∞ —Å —ç–º–æ–¥–∑–∏ (–∂–∏—Ä–Ω—ã–º)
        price_text = f"üí∞ <b>–¶–µ–Ω–∞:</b> {price} —é–∞–Ω–µ–π"
        if exchange_rate and settings.CONVERT_CURRENCY:
            try:
                rub_price = float(price) * exchange_rate
                price_text += f" (~{rub_price:.2f} ‚ÇΩ)"
            except (ValueError, TypeError):
                pass
        price_text += " + –¥–æ—Å—Ç–∞–≤–∫–∞"
        post_parts.append(price_text)
        post_parts.append("")
        
        # –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
        post_parts.append("üìù –î–ª—è –∑–∞–∫–∞–∑–∞ –ø–∏—à–∏—Ç–µ @annabbox –∏–ª–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö üõçÔ∏è")
        post_parts.append("")
        
        # –•—ç—à—Ç–µ–≥–∏
        if hashtags:
            hashtag_text = " ".join([f"#{tag}" for tag in hashtags])
            post_parts.append(hashtag_text)
            post_parts.append("")
        
        # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä
        if product_url:
            post_parts.append(f'<a href="{product_url}">–°—Å—ã–ª–∫–∞</a>')
        
        return "\n".join(post_parts)
