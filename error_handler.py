"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ production —Ä–µ–∂–∏–º–µ.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.
"""

import logging
import traceback
from datetime import datetime
from typing import Optional
from logging.handlers import RotatingFileHandler
from aiogram import Bot
from aiogram.types import Message

from config import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
# –ú–∞–∫—Å–∏–º—É–º 100 –ú–ë –Ω–∞ —Ñ–∞–π–ª, —Ö—Ä–∞–Ω–∏–º 3 —Ñ–∞–π–ª–∞ (–∏—Ç–æ–≥–æ ~300 –ú–ë / ~3 –º–µ—Å—è—Ü–∞)
file_handler = RotatingFileHandler(
    'bot_errors.log',
    maxBytes=100 * 1024 * 1024,  # 100 –ú–ë
    backupCount=2,  # –•—Ä–∞–Ω–∏–º —Ç–µ–∫—É—â–∏–π + 2 —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–∞
    encoding='utf-8'
)
file_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))

console_handler = logging.StreamHandler()
console_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º root logger
logging.basicConfig(
    level=logging.INFO,
    handlers=[file_handler, console_handler]
)

logger = logging.getLogger(__name__)


class ErrorHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    
    # –î—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    USER_MESSAGES = {
        'api_error': (
            "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–µ.\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ –¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —É–¥–∞–ª—ë–Ω\n"
            "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–∏—Å–æ–º\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –≤–µ–¥—ë—Ç –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç–æ–≤–∞—Ä\n"
            "2Ô∏è‚É£ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç\n\n"
            "–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∞ –æ –ø—Ä–æ–±–ª–µ–º–µ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –µ—ë —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º. üõ†Ô∏è"
        ),
        'network_error': (
            "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–∏—Å—É.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 1-2 –º–∏–Ω—É—Ç—ã.\n\n"
            "–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∞ –æ –ø—Ä–æ–±–ª–µ–º–µ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –µ—ë —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º. üõ†Ô∏è"
        ),
        'parsing_error': (
            "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ.\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞\n"
            "‚Ä¢ –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.\n\n"
            "–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∞ –æ –ø—Ä–æ–±–ª–µ–º–µ. üõ†Ô∏è"
        ),
        'llm_error': (
            "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.\n\n"
            "–≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.\n\n"
            "–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∞ –æ –ø—Ä–æ–±–ª–µ–º–µ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –µ—ë —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º. üõ†Ô∏è"
        ),
        'telegram_error': (
            "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
            "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Telegram\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å.\n\n"
            "–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∞ –æ –ø—Ä–æ–±–ª–µ–º–µ. üõ†Ô∏è"
        ),
        'unknown_error': (
            "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.\n\n"
            "–ú—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–ª–µ–º–µ –∏ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ—ë —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "1Ô∏è‚É£ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç\n"
            "2Ô∏è‚É£ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä\n\n"
            "–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞! üôè"
        )
    }
    
    def __init__(self, bot: Bot, admin_chat_id: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫.
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä aiogram Bot –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            admin_chat_id: ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
        """
        self.bot = bot
        self.admin_chat_id = admin_chat_id
        
    async def handle_error(
        self,
        error: Exception,
        user_message: Message,
        context: str = "",
        error_type: str = "unknown_error"
    ) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É: –ª–æ–≥–∏—Ä—É–µ—Ç, —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        
        Args:
            error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã–∑–≤–∞–≤—à–µ–µ –æ—à–∏–±–∫—É
            context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, URL —Ç–æ–≤–∞—Ä–∞)
            error_type: –¢–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π traceback
        tb = traceback.format_exc()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ª–æ–≥–æ–≤
        error_info = {
            'timestamp': datetime.now().isoformat(),
            'user_id': user_message.from_user.id,
            'username': user_message.from_user.username,
            'chat_id': user_message.chat.id,
            'message_text': user_message.text,
            'error_type': error_type,
            'error_class': error.__class__.__name__,
            'error_message': str(error),
            'context': context,
            'traceback': tb
        }
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logger.error(
            f"Error occurred: {error_type}\n"
            f"User: {user_message.from_user.id} (@{user_message.from_user.username})\n"
            f"Message: {user_message.text}\n"
            f"Context: {context}\n"
            f"Error: {error.__class__.__name__}: {str(error)}\n"
            f"Traceback:\n{tb}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_friendly_message = self.USER_MESSAGES.get(error_type, self.USER_MESSAGES['unknown_error'])
        try:
            await user_message.answer(user_friendly_message)
        except Exception as send_error:
            logger.error(f"Failed to send error message to user: {send_error}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await self._notify_admin(error_info)
    
    async def _notify_admin(self, error_info: dict) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –ø—Ä–æ–∏–∑–æ—à–µ–¥—à–µ–π –æ—à–∏–±–∫–µ.
        
        Args:
            error_info: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—à–∏–±–∫–µ
        """
        if not self.admin_chat_id:
            logger.warning("Admin chat ID not configured, skipping admin notification")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
        admin_message = (
            "üö® <b>–û–®–ò–ë–ö–ê –í –ë–û–¢–ï</b> üö®\n\n"
            f"‚è∞ <b>–í—Ä–µ–º—è:</b> {error_info['timestamp']}\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {error_info['user_id']} "
            f"(@{error_info['username'] or 'unknown'})\n"
            f"üí¨ <b>–ß–∞—Ç:</b> {error_info['chat_id']}\n"
            f"üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> <code>{error_info['message_text'][:100]}</code>\n\n"
            f"‚ùó <b>–¢–∏–ø –æ—à–∏–±–∫–∏:</b> {error_info['error_type']}\n"
            f"üêõ <b>–ö–ª–∞—Å—Å:</b> <code>{error_info['error_class']}</code>\n"
            f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> <code>{error_info['error_message'][:200]}</code>\n"
        )
        
        if error_info['context']:
            admin_message += f"\nüîó <b>–ö–æ–Ω—Ç–µ–∫—Å—Ç:</b> <code>{error_info['context'][:100]}</code>\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º traceback –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–µ—Å–ª–∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π)
        traceback_preview = error_info['traceback'][:3000]
        
        try:
            await self.bot.send_message(
                chat_id=self.admin_chat_id,
                text=admin_message,
                parse_mode="HTML"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º traceback
            await self.bot.send_message(
                chat_id=self.admin_chat_id,
                text=f"<b>Traceback:</b>\n<pre>{traceback_preview}</pre>",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"Failed to send admin notification: {e}")
    
    @staticmethod
    def classify_error(error: Exception, context: str = "") -> str:
        """
        –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        
        Args:
            error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≥–¥–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞)
            
        Returns:
            –¢–∏–ø –æ—à–∏–±–∫–∏ (–∫–ª—é—á –¥–ª—è USER_MESSAGES)
        """
        error_class = error.__class__.__name__
        error_message = str(error).lower()
        
        # API –æ—à–∏–±–∫–∏
        if any(keyword in error_message for keyword in ['api', 'tmapi', '400', '401', '403', '404', '500', '502', '503']):
            return 'api_error'
        
        # –°–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
        if any(keyword in error_class.lower() for keyword in ['timeout', 'connection', 'network', 'httpx']):
            return 'network_error'
        
        # –û—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
        if any(keyword in error_class.lower() for keyword in ['parse', 'json', 'keyerror', 'valueerror', 'attributeerror']):
            return 'parsing_error'
        
        # –û—à–∏–±–∫–∏ LLM
        if any(keyword in context.lower() for keyword in ['yandexgpt', 'llm', 'generation']):
            return 'llm_error'
        
        # –û—à–∏–±–∫–∏ Telegram
        if any(keyword in error_class.lower() for keyword in ['telegram', 'aiogram', 'media']):
            return 'telegram_error'
        
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞
        return 'unknown_error'


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ autoparse.py)
error_handler: Optional[ErrorHandler] = None


def init_error_handler(bot: Bot, admin_chat_id: Optional[str] = None) -> ErrorHandler:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫.
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä aiogram Bot
        admin_chat_id: ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä ErrorHandler
    """
    global error_handler
    error_handler = ErrorHandler(bot, admin_chat_id)
    return error_handler

