import httpx
import json
import logging
import asyncio
import time
from src.core.config import settings
from src.utils.url_parser import URLParser, Platform
import certifi
import ssl
# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è RapidAPI –¥–ª—è Pinduoduo —É–¥–∞–ª–µ–Ω–∞

logger = logging.getLogger(__name__)

class TmapiClient:
    """
    –ö–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API tmapi.top.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Taobao, Tmall –∏ Pinduoduo.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –ø–æ URL.
    –†–µ–∞–ª–∏–∑—É–µ—Ç rate limiting –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤.
    –í MOCK —Ä–µ–∂–∏–º–µ —á–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤ –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω—ã—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤.
    –í DEBUG —Ä–µ–∂–∏–º–µ –≤—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏.
    """
    def __init__(self):
        # URL API –¥–ª—è Taobao/Tmall
        self.api_url = "http://api.tmapi.top/taobao/item_detail_by_url"
        self.item_desc_api_url = "http://api.tmapi.top/taobao/item_desc"
        
        # URL API –¥–ª—è Pinduoduo
        self.pinduoduo_api_url = "http://api.tmapi.top/pdd/item_detail"
        
        # API —Ç–æ–∫–µ–Ω—ã
        self.api_token = settings.TMAPI_TOKEN  # –¢–æ–∫–µ–Ω –¥–ª—è Taobao/Tmall
        self.pinduoduo_token = settings.TMAPI_PINDUODUO_TOKEN  # –¢–æ–∫–µ–Ω –¥–ª—è Pinduoduo
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–æ–≤
        self.mock_mode = settings.MOCK_MODE
        self.debug_mode = settings.DEBUG_MODE
        
        # Rate limiting (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É)
        self.rate_limit = settings.TMAPI_RATE_LIMIT
        self.last_request_time = 0
        self.request_lock = asyncio.Lock()  # –î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        # –î–ª—è Pinduoduo –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥ (—Å–º. core.scraper)

    async def get_product_info(self, url: str):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ tmapi.top –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ.
        –í MOCK —Ä–µ–∂–∏–º–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ result.txt.

        Args:
            url (str): URL —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å Taobao –∏–ª–∏ Tmall).

        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ.

        Raises:
            httpx.HTTPStatusError: –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (4xx –∏–ª–∏ 5xx) –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ.
        """
        if self.mock_mode:
            # Mock —Ä–µ–∂–∏–º: —á–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤–º–µ—Å—Ç–æ API
            logger.info(f"[MOCK MODE] Reading product info from result.txt for URL: {url}")
            if self.debug_mode:
                print(f"[TMAPI] üìÅ MOCK MODE - —á–∏—Ç–∞–µ–º –∏–∑ result.txt")
            import os
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
            current_dir = os.path.dirname(os.path.abspath(__file__))
            result_file = os.path.join(current_dir, "result.txt")
            
            with open(result_file, "r", encoding="utf-8") as f:
                content = f.read()
                logger.debug(f"[MOCK MODE] Data loaded from {result_file}")
                # result.txt contains a JSON string, so we need to parse it
                return json.loads(content)
        else:
            logger.info(f"Fetching product info from TMAPI for URL: {url}")
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ (API token –≤ query string)
            querystring = {"apiToken": self.api_token}
            
            # –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ (URL —Ç–æ–≤–∞—Ä–∞ –≤ JSON)
            payload = {"url": url}
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SSL –ø—Ä–æ–≤–µ—Ä–∫—É
            if settings.DISABLE_SSL_VERIFY:
                # –í–ù–ò–ú–ê–ù–ò–ï: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                logger.warning("SSL verification is DISABLED. This is not recommended for production!")
                verify_ssl = False
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º certifi –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
                verify_ssl = ssl.create_default_context(cafile=certifi.where())
            
            async with httpx.AsyncClient(verify=verify_ssl) as client:
                # POST –∑–∞–ø—Ä–æ—Å —Å JSON —Ç–µ–ª–æ–º
                response = await client.post(self.api_url, json=payload, params=querystring)
                response.raise_for_status()  # –í—ã–∑—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ HTTP —Å—Ç–∞—Ç—É—Å–∞
                logger.debug(f"TMAPI response status: {response.status_code}")
                logger.debug(f"TMAPI raw response: {response.text[:500]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
                return response.json()  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON –æ—Ç–≤–µ—Ç

    async def get_item_description(self, item_id: int):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏.
        
        Args:
            item_id (int): ID —Ç–æ–≤–∞—Ä–∞
            
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞, –≤–∫–ª—é—á–∞—è detail_html —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        """
        if self.mock_mode:
            logger.info(f"[MOCK MODE] Reading item description from result55.txt for item_id: {item_id}")
            if self.debug_mode:
                print(f"[TMAPI] üìÅ MOCK MODE - —á–∏—Ç–∞–µ–º –∏–∑ result55.txt")
            import os
            import ast
            current_dir = os.path.dirname(os.path.abspath(__file__))
            result_file = os.path.join(current_dir, "result55.txt")
            
            with open(result_file, "r", encoding="utf-8") as f:
                content = f.read()
                logger.debug(f"[MOCK MODE] Description data loaded from {result_file}")
                # result55.txt contains Python dict with single quotes, use ast.literal_eval
                return ast.literal_eval(content)
        else:
            logger.info(f"Fetching item description from TMAPI for item_id: {item_id}")
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            querystring = {
                "apiToken": self.api_token,
                "item_id": item_id
            }
            
            if settings.DEBUG_MODE:
                print(f"[TMAPI] GET {self.item_desc_api_url}")
                print(f"[TMAPI] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: item_id={item_id}")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SSL –ø—Ä–æ–≤–µ—Ä–∫—É
            if settings.DISABLE_SSL_VERIFY:
                logger.warning("SSL verification is DISABLED. This is not recommended for production!")
                verify_ssl = False
            else:
                verify_ssl = ssl.create_default_context(cafile=certifi.where())
            
            async with httpx.AsyncClient(verify=verify_ssl) as client:
                # GET –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
                response = await client.get(self.item_desc_api_url, params=querystring)
                
                if settings.DEBUG_MODE:
                    print(f"[TMAPI] –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
                    print(f"[TMAPI] –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞: {response.text[:500]}")
                
                response.raise_for_status()
                logger.debug(f"TMAPI item_desc response status: {response.status_code}")
                
                result = response.json()
                
                if settings.DEBUG_MODE:
                    print(f"[TMAPI] JSON –æ—Ç–≤–µ—Ç: code={result.get('code')}, msg={result.get('msg')}")
                    if result.get('data'):
                        data_keys = list(result.get('data', {}).keys())
                        print(f"[TMAPI] –ö–ª—é—á–∏ –≤ data: {data_keys}")
                
                return result
    
    async def _apply_rate_limit(self):
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ (rate limiting).
        –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –∑–∞–ø—Ä–æ—Å—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç.
        """
        async with self.request_lock:
            current_time = time.time()
            time_since_last_request = current_time - self.last_request_time
            
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
            min_interval = 1.0 / self.rate_limit
            
            # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ - –∂–¥—ë–º
            if time_since_last_request < min_interval:
                sleep_time = min_interval - time_since_last_request
                if self.debug_mode:
                    print(f"[TMAPI] ‚è±Ô∏è  Rate limiting: –∂–¥—ë–º {sleep_time:.3f} —Å–µ–∫")
                await asyncio.sleep(sleep_time)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            self.last_request_time = time.time()
    
    async def get_pinduoduo_product(self, url: str):
        """
        Pinduoduo —á–µ—Ä–µ–∑ API –æ—Ç–∫–ª—é—á—ë–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥ (—Å–º. core.scraper).
        """
        raise NotImplementedError("Pinduoduo API –æ—Ç–∫–ª—é—á—ë–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥.")

    async def _resolve_pdd_goods_id_from_url(self, url: str) -> None:
        return None
    
    async def get_product_info_auto(self, url: str):
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ.
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—É (Taobao/Tmall/Pinduoduo) –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –Ω—É–∂–Ω—ã–π API.
        
        Args:
            url (str): URL —Ç–æ–≤–∞—Ä–∞ —Å –ª—é–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π
            
        Raises:
            ValueError: –ï—Å–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
        platform, item_id = URLParser.parse_url(url)
        
        if self.debug_mode:
            print(f"[TMAPI] üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}")
            if item_id:
                print(f"[TMAPI] üÜî –ò–∑–≤–ª–µ—á—ë–Ω item_id: {item_id}")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º rate limiting –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        await self._apply_rate_limit()
        
        # –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–π –º–µ—Ç–æ–¥ API
        if platform == Platform.PINDUODUO:
            result = await self.get_pinduoduo_product(url)
            result['_platform'] = Platform.PINDUODUO  # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            return result
        
        elif platform in [Platform.TAOBAO, Platform.TMALL]:
            result = await self.get_product_info(url)
            result['_platform'] = platform  # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            return result
        
        else:
            error_msg = f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: {url}"
            logger.error(error_msg)
            raise ValueError(error_msg)