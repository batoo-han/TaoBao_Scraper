import httpx
import json
from config import settings

class YandexGPTClient:
    """
    –ö–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å YandexGPT API.
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–µ.
    """
    def __init__(self):
        self.base_url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"  # –ë–∞–∑–æ–≤—ã–π URL YandexGPT API
        self.api_key = settings.YANDEX_GPT_API_KEY  # API –∫–ª—é—á, –∑–∞–≥—Ä—É–∂–∞–µ–º—ã–π –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.headers = {
            "Authorization": f"Api-Key {self.api_key}",  # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
            "Content-Type": "application/json"
        }

    async def generate_post_content(self, product_data: dict):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–æ—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è YandexGPT.

        Args:
            product_data (dict): –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ.

        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏: title, description, characteristics, hashtags

        Raises:
            httpx.HTTPStatusError: –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (4xx –∏–ª–∏ 5xx).
        """
        prompt_template = """
–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ—Å—Ç—ã –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞, –ø—Ä–æ–¥–∞—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä—ã —Å Taobao/Tmall.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –∏ —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ JSON —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:
{{
  "title": "–ö—Ä–∞—Ç–∫–æ–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º (–Ω–µ –±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤)",
  "description": "–ö—Ä–∞—Ç–∫–æ–µ, –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞—é—â–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞)",
  "main_characteristics": {{
    "–Ω–∞–∑–≤–∞–Ω–∏–µ_—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏": "–∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ —Å–ø–∏—Å–æ–∫"
  }},
  "additional_info": {{
    "–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø–æ–ª—è": "–∑–Ω–∞—á–µ–Ω–∏–µ"
  }},
  "hashtags": ["—Ö—ç—à—Ç–µ–≥1", "—Ö—ç—à—Ç–µ–≥2"],
  "emoji": "–ø–æ–¥—Ö–æ–¥—è—â–∏–π —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞"
}}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
1. **title**: –ö—Ä–∞—Ç–∫–æ–µ, —Ü–µ–ø–ª—è—é—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–ø–µ—Ä–µ–≤–µ–¥–∏ –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–π –∏–∑ –¥–∞–Ω–Ω—ã—Ö)
2. **description**: 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–µ —Ç–æ–≤–∞—Ä. –°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –∏ –ø—Ä–æ–¥–∞—é—â–∏–º
3. **main_characteristics**: –¢–û–õ–¨–ö–û —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (2-4 —à—Ç—É–∫–∏):
   - –î–ª—è –æ–¥–µ–∂–¥—ã: –¶–≤–µ—Ç–∞ (—Å–ø–∏—Å–æ–∫), –†–∞–∑–º–µ—Ä—ã
   - –î–ª—è –æ–±—É–≤–∏: –ú–∞—Ç–µ—Ä–∏–∞–ª, –†–∞–∑–º–µ—Ä—ã, –¶–≤–µ—Ç–∞ (—Å–ø–∏—Å–æ–∫)
   - –î–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏: –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –¶–≤–µ—Ç
   - –ù–ï —É–∫–∞–∑—ã–≤–∞–π "–°–æ—Å—Ç–∞–≤", –µ—Å–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–î—Ä—É–≥–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", "–ü—Ä–æ—á–∏–µ", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
   - –ù–∞–∑–≤–∞–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –∑–Ω–∞—á–µ–Ω–∏—è –º–æ–∂–Ω–æ —Å–ø–∏—Å–∫–æ–º —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –º–∞—Å—Å–∏–≤–æ–º
4. **additional_info**: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–û–ü–¶–ò–û–ù–ê–õ–¨–ù–û, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º {{}}):
   - –î–æ–±–∞–≤–ª—è–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ö–û–ù–ö–†–ï–¢–ù–ê–Ø –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
   - –ù–ï –¥–æ–±–∞–≤–ª—è–π –æ–±—â–∏–µ/–ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–∏–ø–∞: "–ë–µ–∑ –±—Ä–µ–Ω–¥–∞", "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", "–û–±—ã—á–Ω—ã–π"
   - –ü—Ä–∏–º–µ—Ä—ã –•–û–†–û–®–ò–• –∑–Ω–∞—á–µ–Ω–∏–π: "–°–µ–∑–æ–Ω: –ó–∏–º–∞", "–ú–∞—Ç–µ—Ä–∏–∞–ª –ø–æ–¥–æ—à–≤—ã: –†–µ–∑–∏–Ω–∞"
   - –ü—Ä–∏–º–µ—Ä—ã –ü–õ–û–•–ò–• –∑–Ω–∞—á–µ–Ω–∏–π: "–ë—Ä–µ–Ω–¥: –ë–µ–∑ –±—Ä–µ–Ω–¥–∞", "–°—Ç–∏–ª—å: –û–±—ã—á–Ω—ã–π"
   - –ù–ï –¥—É–±–ª–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ main_characteristics
5. **hashtags**: 2-3 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ö—ç—à—Ç–µ–≥–∞ –ë–ï–ó —Å–∏–º–≤–æ–ª–∞ # (–Ω–∞–ø—Ä–∏–º–µ—Ä: ["—Å–≤–∏—Ç–µ—Ä", "–∂–µ–Ω—Å–∫–∞—è–æ–¥–µ–∂–¥–∞"])
6. **emoji**: –û–¥–∏–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —ç–º–æ–¥–∑–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞ (üëó –¥–ª—è –æ–¥–µ–∂–¥—ã, üëü –¥–ª—è –æ–±—É–≤–∏, üì± –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏ –∏ —Ç.–¥.)

–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ:
{product_data}

–í–ê–ñ–ù–û: –û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–º JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞!
"""

        product_info_str = json.dumps(product_data, ensure_ascii=False, indent=2)
        prompt = prompt_template.format(product_data=product_info_str)

        if settings.DEBUG_MODE:
            print(f"[YandexGPT] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç:\n{prompt[:500]}...")

        data = {
            "modelUri": f"gpt://{settings.YANDEX_FOLDER_ID}/{settings.YANDEX_GPT_MODEL}", 
            "completionOptions": {
                "stream": False,
                "temperature": 0.3,
                "maxTokens": "2000"
            },
            "messages": [
                {
                    "role": "system",
                    "text": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–æ–≤ –≤ Telegram. –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON."
                },
                {
                    "role": "user",
                    "text": prompt
                }
            ]
        }

        async with httpx.AsyncClient(timeout=60.0) as client:
            response = await client.post(self.base_url, headers=self.headers, json=data)
            response.raise_for_status()
            
            llm_response = response.json()["result"]["alternatives"][0]["message"]["text"]
            
            if settings.DEBUG_MODE:
                print(f"[YandexGPT] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:\n{llm_response}")
            
            # –ü–∞—Ä—Å–∏–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            try:
                # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ markdown code blocks
                cleaned_response = llm_response.strip()
                if cleaned_response.startswith("```json"):
                    cleaned_response = cleaned_response[7:]
                if cleaned_response.startswith("```"):
                    cleaned_response = cleaned_response[3:]
                if cleaned_response.endswith("```"):
                    cleaned_response = cleaned_response[:-3]
                cleaned_response = cleaned_response.strip()
                
                parsed_json = json.loads(cleaned_response)
                return parsed_json
            except json.JSONDecodeError as e:
                if settings.DEBUG_MODE:
                    print(f"[YandexGPT] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                    print(f"[YandexGPT] –û—Ç–≤–µ—Ç LLM: {llm_response}")
                raise ValueError(f"YandexGPT –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON: {e}")
